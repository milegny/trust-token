// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  walletAddress     String          @unique
  username          String?         @unique
  email             String?         @unique
  bio               String?
  avatarUrl         String?
  trustTokenMint    String?         @unique
  isVerified        Boolean         @default(false)
  reputationScore   Float           @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  products          Product[]
  orders            Order[]         @relation("BuyerOrders")
  sales             Order[]         @relation("SellerOrders")
  reviewsGiven      Review[]        @relation("ReviewsGiven")
  reviewsReceived   Review[]        @relation("ReviewsReceived")
  recommendationsGiven Recommendation[] @relation("RecommendationsGiven")
  recommendationsReceived Recommendation[] @relation("RecommendationsReceived")

  @@index([walletAddress])
  @@index([trustTokenMint])
}

model Product {
  id              String          @id @default(uuid())
  sellerId        String
  seller          User            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  name            String
  description     String
  price           Float
  currency        String          @default("SOL")
  category        String
  images          String[]
  stock           Int             @default(0)
  isActive        Boolean         @default(true)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  orderItems      OrderItem[]

  @@index([sellerId])
  @@index([category])
  @@index([isActive])
}

enum OrderStatus {
  CREATED
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
}

model Order {
  id              String          @id @default(uuid())
  buyerId         String
  buyer           User            @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)
  sellerId        String
  seller          User            @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Cascade)
  
  status          OrderStatus     @default(CREATED)
  totalAmount     Float
  currency        String          @default("SOL")
  
  shippingAddress String?
  trackingNumber  String?
  
  txSignature     String?         @unique
  escrowAccount   String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  paidAt          DateTime?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  completedAt     DateTime?
  cancelledAt     DateTime?

  items           OrderItem[]
  review          Review?

  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
  @@index([txSignature])
}

model OrderItem {
  id              String          @id @default(uuid())
  orderId         String
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  quantity        Int
  priceAtPurchase Float
  
  createdAt       DateTime        @default(now())

  @@index([orderId])
  @@index([productId])
}

model Review {
  id              String          @id @default(uuid())
  orderId         String          @unique
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  reviewerId      String
  reviewer        User            @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  revieweeId      String
  reviewee        User            @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  
  rating          Int
  comment         String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([reviewerId])
  @@index([revieweeId])
  @@index([orderId])
}

enum RecommendationType {
  TRUSTWORTHY
  QUALITY_PRODUCTS
  FAST_SHIPPING
  GOOD_COMMUNICATION
  FAIR_PRICING
}

model Recommendation {
  id              String              @id @default(uuid())
  issuerId        String
  issuer          User                @relation("RecommendationsGiven", fields: [issuerId], references: [id], onDelete: Cascade)
  recipientId     String
  recipient       User                @relation("RecommendationsReceived", fields: [recipientId], references: [id], onDelete: Cascade)
  
  type            RecommendationType
  message         String?
  isActive        Boolean             @default(true)
  
  txSignature     String?             @unique
  
  createdAt       DateTime            @default(now())
  revokedAt       DateTime?

  @@index([issuerId])
  @@index([recipientId])
  @@index([isActive])
}

model TrustToken {
  id              String          @id @default(uuid())
  userId          String          @unique
  mintAddress     String          @unique
  
  name            String
  symbol          String
  uri             String
  
  isVerified      Boolean         @default(true)
  mintedAt        DateTime        @default(now())
  revokedAt       DateTime?
  
  txSignature     String?         @unique

  @@index([mintAddress])
  @@index([userId])
}

enum DisputeStatus {
  OPEN
  UNDER_REVIEW
  ESCALATED
  RESOLVED
  CLOSED
  REJECTED
}

enum DisputeType {
  REPUTATION_CARD
  ORDER
  PRODUCT
  USER_CONDUCT
}

enum DisputeSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ModeratorLevel {
  COMMUNITY
  SENIOR
  ADMIN
}

model Dispute {
  id                String            @id @default(uuid())
  
  // Parties involved
  reporterId        String
  reportedId        String
  
  // Dispute details
  type              DisputeType
  severity          DisputeSeverity   @default(MEDIUM)
  status            DisputeStatus     @default(OPEN)
  subject           String
  description       String
  
  // Related entities
  orderId           String?
  reputationCardId  String?
  productId         String?
  
  // Assignment
  assignedTo        String?
  moderatorLevel    ModeratorLevel    @default(COMMUNITY)
  
  // Resolution
  resolution        String?
  resolutionType    String?
  resolutionNotes   String?
  resolvedAt        DateTime?
  
  // Blockchain
  txSignature       String?           @unique
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  evidence          DisputeEvidence[]
  comments          DisputeComment[]
  actions           DisputeAction[]
  votes             DisputeVote[]

  @@index([reporterId])
  @@index([reportedId])
  @@index([assignedTo])
  @@index([status])
  @@index([type])
  @@index([severity])
  @@index([createdAt])
}

enum EvidenceType {
  IMAGE
  DOCUMENT
  SCREENSHOT
  TRANSACTION
  MESSAGE
  OTHER
}

model DisputeEvidence {
  id              String          @id @default(uuid())
  disputeId       String
  dispute         Dispute         @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  
  uploadedBy      String
  type            EvidenceType
  url             String
  description     String?
  metadata        Json?
  
  createdAt       DateTime        @default(now())

  @@index([disputeId])
  @@index([uploadedBy])
}

model DisputeComment {
  id              String          @id @default(uuid())
  disputeId       String
  dispute         Dispute         @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  
  authorId        String
  content         String
  isInternal      Boolean         @default(false)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([disputeId])
  @@index([authorId])
}

enum ActionType {
  CREATED
  ASSIGNED
  EVIDENCE_ADDED
  COMMENT_ADDED
  STATUS_CHANGED
  ESCALATED
  RESOLVED
  CLOSED
  REOPENED
}

model DisputeAction {
  id              String          @id @default(uuid())
  disputeId       String
  dispute         Dispute         @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  
  performedBy     String
  actionType      ActionType
  details         Json?
  
  createdAt       DateTime        @default(now())

  @@index([disputeId])
  @@index([performedBy])
  @@index([actionType])
}

model DisputeVote {
  id              String          @id @default(uuid())
  disputeId       String
  dispute         Dispute         @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  
  voterId         String
  approved        Boolean
  reasoning       String?
  weight          Int             @default(1)
  
  createdAt       DateTime        @default(now())

  @@unique([disputeId, voterId])
  @@index([disputeId])
  @@index([voterId])
}

model ModeratorStats {
  id                    String          @id @default(uuid())
  moderatorId           String          @unique
  
  level                 ModeratorLevel  @default(COMMUNITY)
  disputesResolved      Int             @default(0)
  totalEarned           Float           @default(0)
  currentMonthEarned    Float           @default(0)
  points                Int             @default(0)
  badges                Json            @default("[]")
  rank                  Int             @default(0)
  
  // Performance metrics
  averageResolutionTime Float?
  accuracyRate          Float?
  
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  @@index([moderatorId])
  @@index([level])
  @@index([rank])
}

model DisputeStatistics {
  id                      String          @id @default(uuid())
  period                  String          @unique
  
  totalDisputes           Int             @default(0)
  openDisputes            Int             @default(0)
  resolvedDisputes        Int             @default(0)
  averageResolutionTime   Float?
  resolutionRate          Float?
  
  disputesByType          Json            @default("{}")
  disputesBySeverity      Json            @default("{}")
  
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt

  @@index([period])
}
